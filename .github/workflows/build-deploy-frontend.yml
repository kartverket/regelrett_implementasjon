name: Build and deploy frontend to SKIP
on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit hash to deploy'
        default: ''
        type: string
      dev:
        description: 'Deploy to dev'
        required: true
        type: boolean
      prod:
        description: 'Deploy to prod'
        required: true
        type: boolean
  pull_request:
    branches:
      - main
    paths-ignore:
      - backend**
      - .sikkerhet**
      - compose.yaml
      - README**
  push:
    paths-ignore:
      - backend**
      - .sikkerhet**
      - compose.yaml
      - README**
    branches:
      - main

env:
  REGISTRY: ghcr.io
  ARGO_VERSION_FILE: image-url-regelrett-frontend
  IMAGE_NAME: ${{ github.repository }}-frontend
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: europe-north1

jobs:
  build-dev:
    name: Build and push docker image for dev
    runs-on: ubuntu-latest
    env:
      FRONTEND_URL: https://regelrett.atgcp1-dev.kartverket-intern.cloud
      BACKEND_URL: https://api.regelrett.atgcp1-dev.kartverket-intern.cloud
    permissions:
      contents: write
      packages: write
    outputs:
      image_url: ${{ steps.setOutput.outputs.image_url }}

    steps:
      - name: Checkout code
        if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha == '') }}
        uses: actions/checkout@v4

      - name: Checkout code
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha == '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout specific commit
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha == '' }}
        run: git checkout ${{ github.event.inputs.commit_sha }}

      - name: Generate nginx.conf
        run: |
          mkdir -p ./nginx
          cat <<EOL > ./nginx/nginx.conf
          events {}
          http {
              server {
                  listen 3000;
                  server_name $FRONTEND_URL;

                  # Frontend Route
                  location / {
                      include /etc/nginx/mime.types;
                      root /usr/share/nginx/html;
                      try_files \$uri \$uri/ /index.html;
                  }

                  # Backend Route
                  location /api/ {
                      rewrite ^/api/(.*) /$1 break;
                      proxy_pass $BACKEND_URL;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
              }
          }
          EOL
          

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: 22.x
          cache: "npm"
          cache-dependency-path: "./frontend/beCompliant/package-lock.json"
          registry-url: "https://npm.pkg.github.com"

      - name: Run npm install and build
        working-directory: frontend/beCompliant
        run: |
          npm ci

      - name: Run unit tests
        working-directory: frontend/beCompliant
        run: |
          npm run test

      - name: Build project with production environment
        working-directory: frontend/beCompliant
        run: |
          npm run build:dev

      - name: Set tag
        id: set-tag
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "image_tag=prebuild-temp" >> $GITHUB_OUTPUT
          fi

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=raw,value=${{ steps.set-tag.outputs.image_tag }}

      - name: Build docker and push
        id: build-docker
        uses: docker/build-push-action@v5
        with:
          context: frontend/beCompliant
          push: ${{ !github.event.pull_request.draft }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            FRONTEND_URL=${{ env.FRONTEND_URL }}
            BACKEND_URL=${{ env.BACKEND_URL }}      


      - name: Set output with build values
        id: setOutput
        run: |
          echo "image_url=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-docker.outputs.digest }}" >> $GITHUB_OUTPUT

  build-prod:
    name: Build and push docker image for prod
    runs-on: ubuntu-latest
    env:
      FRONTEND_URL: https://regelrett.atgcp1-prod.kartverket-intern.cloud
      BACKEND_URL: https://api.regelrett.atgcp1-prod.kartverket-intern.cloud
    permissions:
      contents: write
      packages: write
    outputs:
      image_url: ${{ steps.setOutput.outputs.image_url }}

    steps:
      - name: Checkout code
        if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha == '') }}
        uses: actions/checkout@v4

      - name: Checkout code
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha == '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout specific commit
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha == '' }}
        run: git checkout ${{ github.event.inputs.commit_sha }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: 22.x
          cache: "npm"
          cache-dependency-path: "./frontend/beCompliant/package-lock.json"
          registry-url: "https://npm.pkg.github.com"

      - name: Run npm install and build
        working-directory: frontend/beCompliant
        run: |
          npm ci

      - name: Run unit tests
        working-directory: frontend/beCompliant
        run: |
          npm run test

      - name: Build project with production environment
        working-directory: frontend/beCompliant
        run: |
          npm run build:prod

      - name: Set tag
        id: set-tag
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "image_tag=prebuild-temp" >> $GITHUB_OUTPUT
          fi

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=raw,value=${{ steps.set-tag.outputs.image_tag }}

      - name: Build docker and push
        id: build-docker
        uses: docker/build-push-action@v5
        with:
          context: frontend/beCompliant
          push: ${{ !github.event.pull_request.draft }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            FRONTEND_URL=${{ env.FRONTEND_URL }}
            BACKEND_URL=${{ env.BACKEND_URL }} 

      - name: Set output with build values
        id: setOutput
        run: |
          echo "image_url=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-docker.outputs.digest }}" >> $GITHUB_OUTPUT    

  pharos:
    name: Run Pharos
    needs: build-prod
    permissions:
      actions: read
      packages: read
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: "Run Pharos"
        uses: kartverket/pharos@9ba014f232304231c670808ecaca97415d88c830 # v0.2.1
        with:
          image_url: ${{ needs.build-prod.outputs.image_url }}

  deploy-dev:
    name: Deploy to dev
    if: ${{ github.ref == 'refs/heads/main' && (github.event_name != 'workflow_dispatch' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dev == 'true')) }}
    needs: build-dev
    runs-on: ubuntu-latest
    environment:
      name: dev
    permissions:
      id-token: write
    steps:
      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: kartverket/skvis-apps
          identity: regelrett-frontend
      - name: Checkout skvis-apps
        uses: actions/checkout@v4
        with:
          repository: kartverket/skvis-apps
          ref: main
          token: ${{ steps.octo-sts.outputs.token }}
      - name: Update version
        run: |
          echo "\"${{ needs.build-dev.outputs.image_url }}\"" > "env/atgcp1-dev/regelrett-main/${{ env.ARGO_VERSION_FILE }}"
          git config --global user.email "noreply@kartverket.no"
          git config --global user.name "Regelrett CI"
          git commit -am "Update ${{ env.ARGO_VERSION_FILE }}"
          git push

  deploy-prod:
    name: Deploy to prod
    if: ${{ github.ref == 'refs/heads/main' && (github.event_name != 'workflow_dispatch' || (github.event_name == 'workflow_dispatch' && github.event.inputs.prod == 'true')) }}
    needs: build-prod
    runs-on: ubuntu-latest
    environment:
      name: prod
    permissions:
      id-token: write
    steps:
      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: kartverket/skvis-apps
          identity: regelrett-frontend
      - name: Checkout skvis-apps
        uses: actions/checkout@v4
        with:
          repository: kartverket/skvis-apps
          ref: main
          token: ${{ steps.octo-sts.outputs.token }}
      - name: Update version
        run: |
          echo "\"${{ needs.build-prod.outputs.image_url }}\"" > "env/atgcp1-prod/regelrett-main/${{ env.ARGO_VERSION_FILE }}"
          git config --global user.email "noreply@kartverket.no"
          git config --global user.name "Regelrett CI"
          git pull
          git commit -am "Update ${{ env.ARGO_VERSION_FILE }}"
          git push