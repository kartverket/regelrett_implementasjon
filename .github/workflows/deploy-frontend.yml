name: Build and deploy frontend to GCP and SKIP
on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit hash to deploy'
        default: ''
        type: string
  pull_request:
    branches:
      - main
  push:
    paths-ignore:
      - backend**
      - .sikkerhet**
      - compose.yaml
      - README**
    branches:
      - main

permissions:
  id-token: write
  contents: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: europe-north1
  FRONTEND_URL: regelrett-frontend-1024826672490.europe-north1.run.app/
  BACKEND_URL: http://regelrett.bekk.no:8080
  REGISTRY: ghcr.io
  ARGO_VERSION_FILE: image-url-regelrett-backend
  IMAGE_NAME: ${{ github.repository }}-backend

jobs:
  build-dev:
    name: Build and push docker image for dev
    runs-on: ubuntu-latest
    env:
      FRONTEND_URL: regelrett.atgcp1-dev.kartverket-intern.cloud
      BACKEND_URL: http://regelrett-backend.regelrett-main:8080
    permissions:
      contents: write
      packages: write
    outputs:
      image_url: ${{ steps.setOutput.outputs.image_url }}

    steps:
      - name: Checkout code
        if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha == '') }}
        uses: actions/checkout@v4

      - name: Checkout code
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha == '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout specific commit
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha == '' }}
        run: git checkout ${{ github.event.inputs.commit_sha }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@40337cb8f758cccdfe3475af609daa63f81c7e23 # v4.0.2
        with:
          node-version: 22.x
          cache: "npm"
          cache-dependency-path: "./frontend/beCompliant/package-lock.json"
          registry-url: "https://npm.pkg.github.com"

      - name: Run npm install and build
        working-directory: frontend/beCompliant
        run: |
          npm ci

      - name: Run unit tests
        working-directory: frontend/beCompliant
        run: |
          npm run test

      - name: Build project with production environment
        working-directory: frontend/beCompliant
        run: |
          npm run build:dev

      - name: Generate nginx.conf from template
        working-directory: frontend/beCompliant
        run: |
          mkdir -p ./nginx
          envsubst '\$FRONTEND_URL \$BACKEND_URL' < ./nginx/nginx.conf.template > ./nginx/nginx.conf 

      - name: Set tag
        id: set-tag
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "image_tag=prebuild-temp" >> $GITHUB_OUTPUT
          fi

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=raw,value=${{ steps.set-tag.outputs.image_tag }}

      - name: Build docker and push
        id: build-docker
        uses: docker/build-push-action@v6
        with:
          context: frontend/beCompliant
          push: ${{ !github.event.pull_request.draft }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set output with build values
        id: setOutput
        run: |
          echo "image_url=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-docker.outputs.digest }}" >> $GITHUB_OUTPUT

  build-prod:
    name: Build and push docker image for prod
    runs-on: ubuntu-latest
    env:
      FRONTEND_URL: regelrett.atgcp1-prod.kartverket-intern.cloud
      BACKEND_URL: http://regelrett-backend.regelrett-main:8080
    permissions:
      contents: write
      packages: write
    outputs:
      image_url: ${{ steps.setOutput.outputs.image_url }}

    steps:
      - name: Checkout code
        if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha == '') }}
        uses: actions/checkout@v4

      - name: Checkout code
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha == '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout specific commit
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha == '' }}
        run: git checkout ${{ github.event.inputs.commit_sha }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@40337cb8f758cccdfe3475af609daa63f81c7e23 # v4.0.2
        with:
          node-version: 22.x
          cache: "npm"
          cache-dependency-path: "./frontend/beCompliant/package-lock.json"
          registry-url: "https://npm.pkg.github.com"

      - name: Run npm install and build
        working-directory: frontend/beCompliant
        run: |
          npm ci

      - name: Run unit tests
        working-directory: frontend/beCompliant
        run: |
          npm run test

      - name: Build project with production environment
        working-directory: frontend/beCompliant
        run: |
          npm run build:prod

      - name: Generate nginx.conf from template
        working-directory: frontend/beCompliant
        run: |
          mkdir -p ./nginx
          envsubst '\$FRONTEND_URL \$BACKEND_URL' < ./nginx/nginx.conf.template > ./nginx/nginx.conf 

      - name: Set tag
        id: set-tag
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "image_tag=prebuild-temp" >> $GITHUB_OUTPUT
          fi

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=raw,value=${{ steps.set-tag.outputs.image_tag }}

      - name: Build docker and push
        id: build-docker
        uses: docker/build-push-action@v6
        with:
          context: frontend/beCompliant
          push: ${{ !github.event.pull_request.draft }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set output with build values
        id: setOutput
        run: |
          echo "image_url=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-docker.outputs.digest }}" >> $GITHUB_OUTPUT  

  pharos:
    name: Run Pharos
    needs: build-prod
    permissions:
      actions: read
      packages: read
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: "Run Pharos"
        uses: kartverket/pharos@9ba014f232304231c670808ecaca97415d88c830 # v0.2.1
        with:
          image_url: ${{ needs.build-prod.outputs.image_url }}

  deploy-gcp:
    name: Build and deploy to GCP
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      image_url: ${{ steps.setOutput.outputs.image_url }}

    steps:
      - name: Set repository name
        run: echo "IMAGE_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2)-frontend" >> $GITHUB_ENV

      - name: Checkout code
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.commit_sha == '') }}
        uses: actions/checkout@v4

      - name: Checkout code
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.commit_sha == '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout specific commit
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.commit_sha == '' }}
        run: git checkout ${{ github.event.inputs.commit_sha }}

      - name: Authenticate to Google Cloud
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: "Docker auth"
        run: |-
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: 22.x
          cache: "npm"
          cache-dependency-path: "./frontend/beCompliant/package-lock.json"
          registry-url: "https://npm.pkg.github.com"

      - name: Run npm install and build
        working-directory: frontend/beCompliant
        run: |
          # Ensure .env.dev_gcp is available
          if [ ! -f .env.dev_gcp ]; then
            echo "Error: .env.dev_gcp file not found!"
            exit 1
          fi
          cat .env
          cp .env.dev_gcp .env
          cat .env
          npm ci
          npm run build:dev_gcp

      - name: Generate nginx.conf from template
        working-directory: frontend/beCompliant
        run: |
          mkdir -p ./nginx
          envsubst '\$FRONTEND_URL \$BACKEND_URL' < ./nginx/nginx.conf.template > ./nginx/nginx.conf

      - name: Print nginx.conf for debugging
        run: cat ./frontend/beCompliant/nginx/nginx.conf

      - name: Build and Push Docker Image
        run: |
          docker build \
          -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/regelrett-artifact-registry/${{ env.IMAGE_NAME }}:latest ./frontend/beCompliant
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/regelrett-artifact-registry/${{ env.IMAGE_NAME }}:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.IMAGE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/regelrett-artifact-registry/${{ env.IMAGE_NAME }}:latest \
            --port 3000 \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated
          
  deploy-dev:
    name: Deploy to dev
    if: github.ref == 'refs/heads/main'
    needs: [ deploy-gcp, pharos ]
    runs-on: ubuntu-latest
    environment:
      name: dev
    permissions:
      id-token: write
    steps:
      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: kartverket/skvis-apps
          identity: regelrett-frontend
      - name: Checkout skvis-apps
        uses: actions/checkout@v4
        with:
          repository: kartverket/skvis-apps
          ref: main
          token: ${{ steps.octo-sts.outputs.token }}
      - name: Update version
        run: |
          echo "\"${{ needs.build.outputs.image_url }}\"" > "env/atgcp1-dev/regelrett-main/${{ env.ARGO_VERSION_FILE }}"
          git config --global user.email "noreply@kartverket.no"
          git config --global user.name "Regelrett CI"
          git commit -am "Update ${{ env.ARGO_VERSION_FILE }}"
          git push

  deploy-prod:
    name: Deploy to prod
    if: github.ref == 'refs/heads/main'
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment:
      name: prod
    permissions:
      id-token: write
    steps:
      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: kartverket/skvis-apps
          identity: regelrett-frontend
      - name: Checkout skvis-apps
        uses: actions/checkout@v4
        with:
          repository: kartverket/skvis-apps
          ref: main
          token: ${{ steps.octo-sts.outputs.token }}
      - name: Update version
        run: |
          echo "\"${{ needs.build.outputs.image_url }}\"" > "env/atgcp1-prod/regelrett-main/${{ env.ARGO_VERSION_FILE }}"
          git config --global user.email "noreply@kartverket.no"
          git config --global user.name "Regelrett CI"
          git pull
          git commit -am "Update ${{ env.ARGO_VERSION_FILE }}"
          git push