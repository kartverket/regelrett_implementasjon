name: Build and deploy backend to GCP and SKIP
on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit hash to deploy'
        default: ''
        type: string
  pull_request:
    branches:
      - main
  push:
    paths-ignore:
      - frontend**
      - .sikkerhet**
      - compose.yaml
      - README**
    branches:
      - main

permissions:
  id-token: write
  contents: write

env:
  REGION: europe-north1
  DB_URL: 'jdbc:postgresql://regelrett-db:5432/regelrett'
  GCP_PROVIDER_URL: https://regelrett-frontend-1024826672490.europe-north1.run.app/api/callback
  FRONTEND_URL_HOST: regelrett-frontend-1024826672490.europe-north1.run.app
  SIKKERHETSKONTROLLER_WEBHOOK_ID: "ach2vlnWcdxY8Cl3k"
  DRIFTSKONTINUITET_WEBHOOK_ID: "achCxVfK6DaWMhchX"
  ALLOWED_CORS_HOSTS: "regelrett-frontend-1024826672490.europe-north1.run.app,frisk-frontend.fly.dev,localhost:5173"
  REGISTRY: ghcr.io
  ARGO_VERSION_FILE: image-url-regelrett-backend
  IMAGE_NAME: ${{ github.repository }}-backend

jobs:
  build:
    name: Build and push docker image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      image_url: ${{ steps.setOutput.outputs.image_url }}
    steps:
      - name: Checkout code
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.commit_sha == '' }}
        uses: actions/checkout@v4

      - name: Checkout specific commit
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha != '' }}
        run: git checkout ${{ github.event.inputs.commit_sha }}

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          architecture: 'x64'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v4
        with:
          build-root-directory: backend

      - name: Execute Gradle build
        working-directory: backend
        run: ./gradlew shadowJar

      - name: Set tag
        id: set-tag
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "image_tag=prebuild-temp" >> $GITHUB_OUTPUT
          fi

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=raw,value=${{ steps.set-tag.outputs.image_tag }}

      - name: Build docker and push
        id: build-docker
        uses: docker/build-push-action@v6
        with:
          context: backend
          push: ${{ !github.event.pull_request.draft }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set output with build values
        id: setOutput
        run: |
          echo "image_url=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-docker.outputs.digest }}" >> $GITHUB_OUTPUT

  tests:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          architecture: 'x64'

      - name: test pull image
        run: docker pull postgres:15-alpine

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Run Tests
        working-directory: backend
        run: ./gradlew test

  pharos:
    name: Run Pharos
    needs: build
    permissions:
      actions: read
      packages: read
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: "Run Pharos"
        uses: kartverket/pharos@v0.3.1
        with:
          image_url: ${{ needs.build.outputs.image_url }}

  build-for-gcp:
    name: Build and push docker image to GAR
    if: github.ref == 'refs/heads/main'
    needs: tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Set repository name
        run: echo "IMAGE_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2)-backend" >> $GITHUB_ENV

      - name: Set Docker image URL
        run: echo "IMAGE_URL=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/regelrett-artifact-registry/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          architecture: 'x64'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Execute Gradle build
        working-directory: backend
        run: ./gradlew shadowJar

      - name: Authenticate to Google Cloud
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: "Docker auth"
        run: |-
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build docker image
        working-directory: backend
        run: |
          docker build -t ${{ env.IMAGE_URL }} .

      - name: Push Docker image to GAR
        run: |
          docker push ${{ env.IMAGE_URL }}

  deploy-to-gcp-vm:
    name: Build and push docker image to GAR
    if: github.ref == 'refs/heads/main'
    needs: [build-for-gcp, tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set repository name
        run: echo "IMAGE_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2)-backend" >> $GITHUB_ENV

      - name: Set Docker image URL
        run: echo "IMAGE_URL=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/regelrett-artifact-registry/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_ENV

      - name: Debug env variables
        run: |
          echo "IMAGE_NAME is: ${{ env.IMAGE_NAME }}"
          echo "IMAGE_URL IS: ${{ env.IMAGE_URL }}"

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Authenticate to Google Cloud
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: SSH into VM and deploy container
        run: |
          gcloud compute ssh regelrett-backend-vm --zone ${{ env.REGION }}-b --project ${{ secrets.GCP_PROJECT_ID }} --command "
            sudo gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet &&
            sudo docker stop $(sudo docker ps -a -q) || true &&
            sudo docker rm $(sudo docker ps -a -q) || true &&
            sudo docker network rm container_network || true &&
            sudo docker image prune -f || true &&
            sudo docker network create container_network &&
            sudo docker run --name regelrett-db --network container_network  -it \
              -e POSTGRES_PASSWORD=pwd \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_DB=regelrett \
              -p 5432:5432 -d postgres:15.4               
            sudo docker pull '${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/regelrett-artifact-registry/${{ env.IMAGE_NAME }}:latest' &&               
            sudo docker stop '${{ env.IMAGE_NAME }}' || true &&
            sudo docker rm '${{ env.IMAGE_NAME }}' || true &&
            sudo docker run -d --name '${{ env.IMAGE_NAME }}' --network container_network -p 8080:8080 \
              -e AIRTABLE_ACCESS_TOKEN=${{ secrets.AIRTABLE_ACCESS_TOKEN }} \
              -e CLIENT_ID=${{ secrets.ENTRA_CLIENT_ID }} \
              -e TENANT_ID=${{ secrets.ENTRA_TENANT_ID }} \
              -e CLIENT_SECRET=${{ secrets.ENTRA_CLIENT_SECRET }}  \
              -e DB_URL='${{ env.DB_URL }}' \
              -e AUTH_PROVIDER_URL=${{ env.GCP_PROVIDER_URL }} \
              -e KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
              -e FRONTEND_URL_HOST=${{ env.FRONTEND_URL_HOST }} \
              -e SIKKERHETSKONTROLLER_WEBHOOK_ID=${{ env.SIKKERHETSKONTROLLER_WEBHOOK_ID }} \
              -e DRIFTSKONTINUITET_WEBHOOK_ID=${{ env.DRIFTSKONTINUITET_WEBHOOK_ID }} \
              -e SIKKERHETSKONTROLLER_WEBHOOK_SECRET=${{ secrets.SIKKERHETSKONTROLLER_WEBHOOK_SECRET_GCP }} \
              -e DRIFTSKONTINUITET_WEBHOOK_SECRET=${{ secrets.DRIFTSKONTINUITET_WEBHOOK_SECRET_GCP }} \
              -e ALLOWED_CORS_HOSTS=${{ env.ALLOWED_CORS_HOSTS }} \
              -v /etc/regelrett/keystore/keystore.jks:/etc/regelrett/keystore/keystore.jks:ro \
              '${{ env.IMAGE_URL }}'
          "

  deploy-dev:
    name: Deploy to dev
    if: github.ref == 'refs/heads/main'
    needs: [ build, deploy-to-gcp-vm, pharos ]
    runs-on: ubuntu-latest
    environment:
      name: dev
    permissions:
      id-token: write
    steps:
      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: kartverket/skvis-apps
          identity: regelrett-backend
      - name: Checkout skvis-apps
        uses: actions/checkout@v4
        with:
          repository: kartverket/skvis-apps
          ref: main
          token: ${{ steps.octo-sts.outputs.token }}
      - name: Update version
        run: |
          echo "\"${{ needs.build.outputs.image_url }}\"" > "env/atgcp1-dev/regelrett-main/${{ env.ARGO_VERSION_FILE }}"
          git config --global user.email "noreply@kartverket.no"
          git config --global user.name "Regelrett CI"
          git commit -am "Update ${{ env.ARGO_VERSION_FILE }}"
          git push


  deploy-prod:
    name: Deploy to prod
    if: github.ref == 'refs/heads/main'
    needs: [build, deploy-dev]
    runs-on: ubuntu-latest
    environment:
      name: prod
    permissions:
      id-token: write
    steps:
      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: kartverket/skvis-apps
          identity: regelrett-backend
      - name: Checkout skvis-apps
        uses: actions/checkout@v4
        with:
          repository: kartverket/skvis-apps
          ref: main
          token: ${{ steps.octo-sts.outputs.token }}
      - name: Update version
        run: |
          echo "\"${{ needs.build.outputs.image_url }}\"" > "env/atgcp1-prod/regelrett-main/${{ env.ARGO_VERSION_FILE }}"
          git config --global user.email "noreply@kartverket.no"
          git config --global user.name "Regelrett CI"
          git pull
          git commit -am "Update ${{ env.ARGO_VERSION_FILE }}"
          git push