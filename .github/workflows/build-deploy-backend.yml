name: Build and deploy backend to SKIP
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths-ignore:
      - frontend**
      - .sikkerhet**
      - compose.yaml
      - README**
  push:
    paths-ignore:
      - frontend**
      - .sikkerhet**
      - compose.yaml
      - README**
    branches:
      - main

permissions:
  id-token: write
  contents: write

env:
  REGISTRY: ghcr.io
  ARGO_VERSION_FILE: image-url-regelrett-backend
  IMAGE_NAME: ${{ github.repository }}-backend

jobs:
  build:
    name: Build and push docker image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      image_url: ${{ steps.setOutput.outputs.image_url }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          architecture: 'x64'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

#      - name: Generate and submit dependency graph
#        uses: gradle/actions/dependency-submission@v3

      - name: Execute Gradle build
        working-directory: backend
        run: ./gradlew build

      - name: Set tag
        id: set-tag
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "image_tag=prebuild-temp" >> $GITHUB_OUTPUT
          fi

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=raw,value=${{ steps.set-tag.outputs.image_tag }}

      - name: Build docker and push
        id: build-docker
        uses: docker/build-push-action@v5
        with:
          context: backend
          push: ${{ !github.event.pull_request.draft }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set output with build values
        id: setOutput
        run: |
          echo "image_url=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-docker.outputs.digest }}" >> $GITHUB_OUTPUT  

  pharos:
    name: Run Pharos on docker image
    needs: build
    permissions:
      actions: read
      packages: read
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: "Run Pharos"
        uses: kartverket/pharos@v0.1.5
        with:
          image_url: ${{ needs.build.outputs.image_url }}

  deploy:
    name: Deploy to SKIP
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout apps-repo
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          repository: kartverket/skvis-apps
          ref: main
          token: ${{ secrets.ARGO_PAT }}
      - name: Update version
        run: |
          echo "\"${{ needs.build.outputs.image_url }}\"" > "env/atgcp1-dev/regelrett-main/${{ env.ARGO_VERSION_FILE }}"
          git config --global user.email "noreply@kartverket.no"
          git config --global user.name "Regelrett CI"
          git commit -am "Update Regelrett frontend ${{ env.ARGO_VERSION_FILE }}"
          git push