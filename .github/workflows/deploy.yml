name: Build and deploy
on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit hash to deploy'
        default: ''
        type: string
  pull_request:
    branches:
      - main
  push:
    paths-ignore:
      - .sikkerhet**
      - compose.yaml
      - README**
    branches:
      - main

permissions:
  id-token: write
  contents: write

env:
  PROJECT_ID: spire-regelrett-0x54
  REGION: europe-north1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RR_DATABASE_HOST: regelrett-db:5432
  RR_DATABASE_NAME: regelrett
  RR_SCHEMA_SIKKERHETSKONTROLLER_WEBHOOK_ID: "ach2vlnWcdxY8Cl3k"
  RR_SCHEMA_DRIFTSKONTINUITET_WEBHOOK_ID: "achCxVfK6DaWMhchX"

jobs:
  build:
    name: Build and push docker image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      image: ${{ steps.setOutput.outputs.image }}
    steps:
      - name: Checkout code
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.commit_sha == '') }}
        uses: actions/checkout@v4

      - name: Checkout code
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.commit_sha == '') }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout specific commit
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.commit_sha != '' }}
        run: git checkout ${{ github.event.inputs.commit_sha }}

      - name: Set tag
        id: set-tag
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "image_tag=prebuild-temp" >> $GITHUB_OUTPUT
          fi

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=raw,value=${{ steps.set-tag.outputs.image_tag }}

      - name: Build docker and push
        id: build-docker
        uses: docker/build-push-action@v6
        with:
          push: ${{ !github.event.pull_request.draft }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set output with build values
        id: setOutput
        run: |
          echo "image=${{ env.IMAGE_NAME }}@${{ steps.build-docker.outputs.digest }}" >> $GITHUB_OUTPUT

  pharos:
    name: Run Pharos
    needs: build
    permissions:
      actions: read
      packages: read
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: "Run Pharos"
        uses: kartverket/pharos@7cff320db83b679cce0569f1e171a039f78f72de # v0.2.1
        with:
          image_url: ${{ env.REGISTRY }}/${{ needs.build.outputs.image }}

  deploy-gcp:
    name: Build and deploy to GCP
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Set repository name
        run: echo "IMAGE_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2)" >> $GITHUB_ENV

      - name: Set Docker image URL
        run: echo "IMAGE_URL=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/ghcr/${{ needs.build.outputs.image }}" >> $GITHUB_ENV

      - name: Debug env variables
        run: |
          echo "IMAGE_NAME is: ${{ env.IMAGE_NAME }}"
          echo "IMAGE_URL IS: ${{ env.IMAGE_URL }}"


      - name: Authenticate to Google Cloud
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.IMAGE_NAME }} \
            --image ${{ env.IMAGE_URL }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated

  deploy-dev:
    name: Deploy to dev
    if: github.ref == 'refs/heads/main'
    needs: [ build, deploy-gcp, pharos ]
    runs-on: ubuntu-latest
    environment:
      name: dev
    permissions:
      id-token: write
    steps:
      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: kartverket/skvis-apps
          identity: regelrett
      - name: Checkout skvis-apps
        uses: actions/checkout@v4
        with:
          repository: kartverket/skvis-apps
          ref: main
          token: ${{ steps.octo-sts.outputs.token }}
      - name: Update version
        run: |
          echo "\"${{ needs.build.outputs.image_url }}\"" > "env/atgcp1-dev/regelrett-main/${{ env.ARGO_VERSION_FILE }}"
          git config --global user.email "noreply@kartverket.no"
          git config --global user.name "Regelrett CI"
          git commit -am "Update ${{ env.ARGO_VERSION_FILE }}"
          git push
